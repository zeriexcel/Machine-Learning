# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IXL61cjMmTiK_qNrk0EIBEQBm4TtIVW9
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the Iris dataset
from sklearn.datasets import load_iris

data = load_iris()

# Convert to a pandas DataFrame
iris = pd.DataFrame(data.data, columns=data.feature_names)
iris['target'] = data.target

# Display the first 5 rows
iris.head()


# Basic statistical summary
iris.describe()
# Pairplot to visualize feature relationships
sns.pairplot(iris, hue='target')
plt.show()


# Separate features (X) and target (y)
X = iris.drop('target', axis=1)
y = iris['target']

# Split into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Show shape of the data
print(f"Training data shape: {X_train.shape}")
print(f"Testing data shape: {X_test.shape}")

# Create and train Logistic Regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Make predictions on test data
y_pred = model.predict(X_test)

# Accuracy score
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plotting confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
            xticklabels=data.target_names, yticklabels=data.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
# Sample new data (format: [sepal length, sepal width, petal length, petal width])
new_data = np.array([[5.1, 3.5, 1.4, 0.2]])

# Predict using trained model
prediction = model.predict(new_data)

# Convert numeric prediction to species name
predicted_class = data.target_names[prediction][0]
print(f"Predicted Class: {predicted_class}")